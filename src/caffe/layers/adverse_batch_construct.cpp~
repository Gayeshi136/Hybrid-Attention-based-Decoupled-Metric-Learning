//now only support for N*2 batches CVPR18 associate with adverse_generator_loss & kcenterV2AdvLossLayer
#include <vector>

#include "caffe/layers/adverse_batch_construct.hpp"
#include "caffe/util/math_functions.hpp"

namespace caffe {

template <typename Dtype>
void AdverseBatchConstructLayer<Dtype>::LayerSetUp(const vector<Blob<Dtype>*>& bottom,
      const vector<Blob<Dtype>*>& top) {
  CHECK_EQ(bottom[0]->width(),1);
  CHECK_EQ(bottom[0]->height(),1);
}

template <typename Dtype>
void AdverseBatchConstructLayer<Dtype>::Reshape(const vector<Blob<Dtype>*>& bottom,
      const vector<Blob<Dtype>*>& top) {
  // Initialize with the first blob.
  int class_num = this->layer_param_.adverse_batch_construct_param().class_num();
  top[0]->Reshape(class_num*(class_num-1), bottom[0]->channels()*3, 1, 1);
}

template <typename Dtype>
void AdverseBatchConstructLayer<Dtype>::Forward_cpu(const vector<Blob<Dtype>*>& bottom,
      const vector<Blob<Dtype>*>& top) {
      
      int class_num = this->layer_param_.adverse_batch_construct_param().class_num();
      int image_num_per_class = bottom[0]->num() / class_num;
      int channels = bottom[0]->channels();
      const Dtype* bottom_data = bottom[0]->cpu_data();
      Dtype* top_data = top[0]->mutable_cpu_data();
      for(int i = 0; i < class_num; i++){
                for(int j = 0; j < class_num ; j++){
                        if(i < j){
                                caffe_copy(channels, bottom_data + i * image_num_per_class * channels, top_data + i * (class_num - 1) * channels * 3 + (j - 1) * channels * 3);
                                caffe_copy(channels, bottom_data + i * image_num_per_class * channels + channels, top_data + i * (class_num -1) * channels * 3 + (j - 1) * channels * 3 + channels);
                                caffe_copy(channels, bottom_data + j * image_num_per_class * channels + channels, top_data + i * (class_num -1) * channels * 3 + (j - 1) * channels * 3 + 2 * channels);
                        }
                        else if(i > j){
                                caffe_copy(channels, bottom_data + i * image_num_per_class * channels, top_data + i * (class_num - 1) * channels * 3 + j * channels * 3);
                                caffe_copy(channels, bottom_data + i * image_num_per_class * channels + channels, top_data + i * (class_num -1) * channels * 3 + j * channels * 3 + channels);
                                caffe_copy(channels, bottom_data + j * image_num_per_class * channels + channels, top_data + i * (class_num -1) * channels * 3 + j * channels * 3 + 2 * channels);
                        }
                }
      }
}

template <typename Dtype>
void AdverseBatchConstructLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,
      const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom) {
      
      int class_num = this->layer_param_.adverse_batch_construct_param().class_num();
      int image_num_per_class = bottom[0]->num() / class_num;
      int channels = bottom[0]->channels();
      const Dtype* top_diff = top[0]->cpu_diff();
      Dtype* bottom_diff = bottom[0]->mutable_cpu_diff();
      caffe_set(bottom[0]->count(), Dtype(0), bottom[0]->mutable_cpu_diff());
      for(int i = 0; i < class_num; i++){
                for(int j = 0; j < class_num ; j++){
                        if(i < j){
                                caffe_cpu_axpby(channels, Dtype(1), top_diff + i * (class_num - 1) * channels * 3 + (j - 1) * channels * 3, Dtype(1), bottom_diff + i * image_num_per_class * channels);
                                caffe_cpu_axpby(channels, Dtype(1), top_diff + i * (class_num - 1) * channels * 3 + (j - 1) * channels * 3 + channels, Dtype(1), bottom_diff + i * image_num_per_class * channels + channels);
                                caffe_cpu_axpby(channels, Dtype(1), top_diff + i * (class_num - 1) * channels * 3 + (j - 1) * channels * 3 + 2 * channels, Dtype(1), bottom_diff + j * image_num_per_class * channels + channels);
                        }
                        else if(i < j){
                                caffe_cpu_axpby(channels, Dtype(1), top_diff + i * (class_num - 1) * channels * 3 + j * channels * 3, Dtype(1), bottom_diff + i * image_num_per_class * channels);
                                caffe_cpu_axpby(channels, Dtype(1), top_diff + i * (class_num - 1) * channels * 3 + j * channels * 3 + channels, Dtype(1), bottom_diff + i * image_num_per_class * channels + channels);
                                caffe_cpu_axpby(channels, Dtype(1), top_diff + i * (class_num - 1) * channels * 3 + j * channels * 3 + 2 * channels, Dtype(1), bottom_diff + j * image_num_per_class * channels + channels);
                        }
                }
      }
}

#ifdef CPU_ONLY
STUB_GPU(AdverseBatchConstructLayer);
#endif

INSTANTIATE_CLASS(AdverseBatchConstructLayer);
REGISTER_LAYER_CLASS(AdverseBatchConstruct);

}  // namespace caffe
