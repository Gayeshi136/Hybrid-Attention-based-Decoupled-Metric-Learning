// for k*cos + 1 - k
#include <vector>

#include "caffe/filler.hpp"
#include "caffe/layers/inner_product_for_large_softmax_layer.hpp"
#include "caffe/util/math_functions.hpp"

namespace caffe {

template <typename Dtype>
__global__ void update_top_data(const int M_, Dtype* top_data, const Dtype* label_, Dtype* w_norm, Dtype* x_norm, const Dtype lamda_, const Dtype* kesi, const int N_) {

  CUDA_KERNEL_LOOP(index, M_) {
    Dtype kesi1 = kesi[0] + 1.0;
    Dtype alpha1 = (lamda_ + (Dtype(1.0) - lamda_ )* kesi1);
    Dtype alpha2 = (Dtype(1.0) - lamda_ )*(Dtype(1.0) - kesi1);
    int label = static_cast<int>(label_[index]);
    top_data[index * N_ + label] = alpha1 * top_data[index * N_ + label] + alpha2 * w_norm[label] * x_norm[index];
  }
}

template <typename Dtype>
void InnerProductForLargeSoftmaxLayer<Dtype>::Forward_gpu(const vector<Blob<Dtype>*>& bottom,
    const vector<Blob<Dtype>*>& top) {
Forward_cpu(bottom,top);
return;
  const Dtype* bottom_data = bottom[0]->gpu_data();
  Dtype* top_data = top[0]->mutable_gpu_data();
  const Dtype* weight = this->blobs_[0]->gpu_data();
  const Dtype* label_ = bottom[1]->gpu_data();
  Dtype* w_norm = w_norm_.mutable_gpu_data();
  Dtype* x_norm = x_norm_.mutable_gpu_data();
  // compute ||x|| num=M_
  caffe_gpu_powx(bottom[0]->count(), bottom_data, Dtype(2), sqr_bottom.mutable_gpu_data());
  for (int i = 0; i < M_; i++) {
    Dtype a;
    caffe_gpu_asum<Dtype>(K_, sqr_bottom.gpu_data()+i*K_, &a);
    caffe_gpu_set(1, Dtype(pow(a, -0.5)), x_norm + i);
  }
  // compute ||w|| num=N_
  caffe_gpu_powx(this->blobs_[0]->count(), weight, Dtype(2), sqr_w.mutable_gpu_data());
  for (int i = 0; i < N_; i++) {
    Dtype a;
    caffe_gpu_asum<Dtype>(K_, sqr_w.gpu_data()+i*K_, &a);
    caffe_gpu_set(1, Dtype(pow(a, -0.5)), w_norm + i);
  }
  if (M_ == 1) {
    caffe_gpu_gemv<Dtype>(CblasNoTrans, N_, K_, (Dtype)1.,
                         weight, bottom_data, (Dtype)0., top_data);
    if (bias_term_)
      caffe_gpu_axpy<Dtype>(N_, bias_multiplier_.cpu_data()[0],
                            this->blobs_[1]->gpu_data(), top_data);
  } else {
    caffe_gpu_gemm<Dtype>(CblasNoTrans, CblasTrans, M_, N_, K_, (Dtype)1.,
                          bottom_data, weight, (Dtype)0., top_data);
   //produce random guassian noise
    Dtype* kesi = kesi_.mutable_gpu_data();
    caffe_gpu_rng_gaussian<Dtype>(1,Dtype(0),sqrt(m_),kesi);
    //kesi[0] = std::fabs(kesi[0]) + miu_ + 1.0;
    caffe_gpu_abs<Dtype>(1,kesi,kesi);
   
//update top_data
    update_top_data<Dtype><<<CAFFE_GET_BLOCKS(M_), CAFFE_CUDA_NUM_THREADS>>>(M_, top_data, label_, w_norm, x_norm, lamda_, kesi, N_);
    if (bias_term_)
      caffe_gpu_gemm<Dtype>(CblasNoTrans, CblasNoTrans, M_, N_, 1, (Dtype)1.,
                            bias_multiplier_.gpu_data(),
                            this->blobs_[1]->gpu_data(), (Dtype)1., top_data);
  }

}


template <typename Dtype>
__global__ void modifydiff(const int M_, const int N_, Dtype* top_diff_copy, const Dtype* label_) {

  CUDA_KERNEL_LOOP(index, M_) {
    int label = static_cast<int>(label_[index]);
    top_diff_copy[index * N_ + label] = Dtype(0);
  }
}

template <typename Dtype>
__global__ void axpy(const int K_, Dtype lamda_, const Dtype* kesi, const Dtype* top_diff, const Dtype* data, Dtype* diff) {

  CUDA_KERNEL_LOOP(index, K_) {
    Dtype kesi1 = kesi[0] + 1.0;
    Dtype alpha1 = (lamda_ + (Dtype(1.0) - lamda_ )* kesi1);
    diff[index] = diff[index] + data[index] *  alpha1 * top_diff[0];
  }
}
template <typename Dtype>
__global__ void axpy1(const int K_, Dtype lamda_, const Dtype* kesi, const Dtype* top_diff, const Dtype* data, Dtype* diff, const Dtype* norm1, const Dtype* norm2) {

  CUDA_KERNEL_LOOP(index, K_) {
    Dtype kesi1 = kesi[0] + 1.0;
    Dtype alpha2 = (Dtype(1.0) - lamda_ )*(Dtype(1.0) - kesi1);
    diff[index] = diff[index] + data[index] * alpha2 * top_diff[0] * norm1[0] / norm2[0];
  }
}

template <typename Dtype>
void InnerProductForLargeSoftmaxLayer<Dtype>::Backward_gpu(const vector<Blob<Dtype>*>& top,
    const vector<bool>& propagate_down,
    const vector<Blob<Dtype>*>& bottom) {
Backward_cpu(top,propagate_down,bottom);
return;
  const Dtype* top_diff = top[0]->gpu_diff();
  const Dtype* label_ = bottom[1]->gpu_data();
  const Dtype* kesi = kesi_.gpu_data();
  const Dtype* w_norm = w_norm_.gpu_data();
  const Dtype* x_norm = x_norm_.gpu_data();
// copy top_diff to top_diff_copy
  Dtype* top_diff_copy = top_diff_copy_.mutable_gpu_data();
  caffe_copy(top[0]->count(), top_diff, top_diff_copy);
// modify top_diff_copy to zero

  modifydiff<Dtype><<<CAFFE_GET_BLOCKS(M_), CAFFE_CUDA_NUM_THREADS>>>(M_, N_, top_diff_copy, label_);

    // Gradient with respect to weight
  if (this->param_propagate_down_[0]) {
    const Dtype* bottom_data = bottom[0]->gpu_data();
    caffe_gpu_gemm<Dtype>(CblasTrans, CblasNoTrans, N_, K_, M_, (Dtype)1.,
        top_diff_copy, bottom_data, (Dtype)1., this->blobs_[0]->mutable_gpu_diff());
  for (int i = 0; i < M_; i++) {
       int label = static_cast<int>(label_[i]);
      // caffe_gpu_axpy<Dtype>(K_, alpha1*top_diff1[i*N_ + label], bottom_data+i*K_, this->blobs_[0]->mutable_gpu_diff()+label*K_);
       //caffe_gpu_axpy<Dtype>(K_, alpha2*x_norm1[i]*top_diff1[i*N_ + label]/w_norm1[label], this->blobs_[0]->gpu_data()+label*K_, this->blobs_[0]->mutable_gpu_diff()+label*K_);
       axpy<Dtype><<<CAFFE_GET_BLOCKS(K_), CAFFE_CUDA_NUM_THREADS>>>(K_, lamda_, kesi, top_diff+i*N_+label, bottom_data+i*K_, this->blobs_[0]->mutable_gpu_diff()+label*K_);
       axpy1<Dtype><<<CAFFE_GET_BLOCKS(K_), CAFFE_CUDA_NUM_THREADS>>>(K_, lamda_, kesi, top_diff+i*N_+label, this->blobs_[0]->gpu_data()+label*K_, this->blobs_[0]->mutable_gpu_diff()+label*K_, x_norm+i,w_norm+label);
    }
  }
    // Gradient with respect to bias
  if (bias_term_ && this->param_propagate_down_[1]) {
    caffe_gpu_gemv<Dtype>(CblasTrans, M_, N_, (Dtype)1., top_diff,
        bias_multiplier_.gpu_data(), (Dtype)1.,
        this->blobs_[1]->mutable_gpu_diff());
  }
    // Gradient with respect to bottom data
  if (propagate_down[0]) {
    const Dtype* bottom_data = bottom[0]->gpu_data();
    caffe_gpu_gemm<Dtype>(CblasNoTrans, CblasNoTrans, M_, K_, N_, (Dtype)1.,
        top_diff_copy, this->blobs_[0]->gpu_data(), (Dtype)0.,
        bottom[0]->mutable_gpu_diff());
  for (int i = 0; i < M_; i++) {
       int label = static_cast<int>(label_[i]);
      // caffe_gpu_axpy<Dtype>(K_, alpha1*top_diff1[i*N_ + label], this->blobs_[0]->gpu_data()+label*K_, bottom[0]->mutable_gpu_diff()+i*K_);
       //caffe_gpu_axpy<Dtype>(K_, alpha2*top_diff1[i*N_ + label]*w_norm1[label]/x_norm1[i], bottom_data+i*K_, bottom[0]->mutable_gpu_diff()+i*K_);
       axpy<Dtype><<<CAFFE_GET_BLOCKS(K_), CAFFE_CUDA_NUM_THREADS>>>(K_, lamda_, kesi, top_diff+i*N_+label, this->blobs_[0]->gpu_data()+label*K_, bottom[0]->mutable_gpu_diff()+i*K_);
       axpy1<Dtype><<<CAFFE_GET_BLOCKS(K_), CAFFE_CUDA_NUM_THREADS>>>(K_, lamda_, kesi, top_diff+i*N_+label, bottom_data+i*K_, bottom[0]->mutable_gpu_diff()+i*K_, w_norm+label, x_norm+i);
   }
  }
}

INSTANTIATE_LAYER_GPU_FUNCS(InnerProductForLargeSoftmaxLayer);

}  // namespace caffe
