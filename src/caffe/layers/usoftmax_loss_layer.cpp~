//unsupervised softmax loss
#include <algorithm>
#include <vector>
#include "stdio.h"
#include "caffe/filler.hpp"
#include "caffe/layer.hpp"
#include "caffe/layers/usoftmax_loss_layer.hpp"
#include "caffe/util/io.hpp"
#include "caffe/util/math_functions.hpp"
#include <cmath>
/**********************/
/**/
namespace caffe {

template <typename Dtype>
void UsoftmaxLossLayer<Dtype>::LayerSetUp(
  const vector<Blob<Dtype>*>& bottom, const vector<Blob<Dtype>*>& top) {
  LossLayer<Dtype>::LayerSetUp(bottom, top);
  CHECK_EQ(bottom[0]->height(), 1);
  CHECK_EQ(bottom[0]->width(), 1);
}
template <typename Dtype>
void UsoftmaxLossLayer<Dtype>::Forward_cpu(
    const vector<Blob<Dtype>*>& bottom,
    const vector<Blob<Dtype>*>& top) {
    const Dtype* data = bottom[0]->cpu_data();
    
    int num = bottom[0]->num();//
    int channels = bottom[0]->channels();
    Dtype loss = 0; 
    //compute loss
    for(int i=0; i<num; i++)
    {
        int position=-1;
        Dtype max=0;
        for(int j=0; j<channels; j++)
        {
                position = max > data[i*channels+j] ? position : j;
                max = max > data[i*channels+j] ? max : data[i*channels+j];
        }//find true class
        Dtype distance_up = exp(data[i*channels+position]-max);//numerator
        Dtype distance_down = 0.0;
        for(int j=0; j<channels; j++)
        {
                distance_down+=exp(data[i*channels+j]-max);
        }//denominator
        loss = loss - log(std::max(distance_up/distance_down, Dtype(1e-20)));
        //compute gradients
        bottom[0]->mutable_cpu_diff()[i*channels+position]+= distance_up/distance_down-Dtype(1);//for numerator
        for(int j=0; j<channels; j++)
        {
                if(j==position)
                        continue;
                bottom[0]->mutable_cpu_diff()[i*channels+j]+=exp(data[i*channels+j]-max)/distance_down;
        }
    }
    top[0]->mutable_cpu_data()[0] = loss/num;
}

     

template <typename Dtype>
void UsoftmaxLossLayer<Dtype>::Backward_cpu(const vector<Blob<Dtype>*>& top,
	const vector<bool>& propagate_down, const vector<Blob<Dtype>*>& bottom) 
{
    caffe_cpu_scale(bottom[0]->count(), top[0]->cpu_diff()[0] /bottom[0]->num(), bottom[0]->cpu_diff(), bottom[0]->mutable_cpu_diff());
}




#ifdef CPU_ONLY
STUB_GPU(UsoftmaxLossLayer);
#endif

INSTANTIATE_CLASS(UsoftmaxLossLayer);
REGISTER_LAYER_CLASS(UsoftmaxLoss);

}  // namespace caffe
